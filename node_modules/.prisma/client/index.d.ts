
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model CategoriaTask
 * 
 */
export type CategoriaTask = $Result.DefaultSelection<Prisma.$CategoriaTaskPayload>
/**
 * Model TaskPrincipal
 * 
 */
export type TaskPrincipal = $Result.DefaultSelection<Prisma.$TaskPrincipalPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.categoriaTask`: Exposes CRUD operations for the **CategoriaTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriaTasks
    * const categoriaTasks = await prisma.categoriaTask.findMany()
    * ```
    */
  get categoriaTask(): Prisma.CategoriaTaskDelegate<ExtArgs>;

  /**
   * `prisma.taskPrincipal`: Exposes CRUD operations for the **TaskPrincipal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskPrincipals
    * const taskPrincipals = await prisma.taskPrincipal.findMany()
    * ```
    */
  get taskPrincipal(): Prisma.TaskPrincipalDelegate<ExtArgs>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Task: 'Task',
    CategoriaTask: 'CategoriaTask',
    TaskPrincipal: 'TaskPrincipal',
    Log: 'Log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "task" | "categoriaTask" | "taskPrincipal" | "log"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      CategoriaTask: {
        payload: Prisma.$CategoriaTaskPayload<ExtArgs>
        fields: Prisma.CategoriaTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          findFirst: {
            args: Prisma.CategoriaTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          findMany: {
            args: Prisma.CategoriaTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>[]
          }
          create: {
            args: Prisma.CategoriaTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          createMany: {
            args: Prisma.CategoriaTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>[]
          }
          delete: {
            args: Prisma.CategoriaTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          update: {
            args: Prisma.CategoriaTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaTaskPayload>
          }
          aggregate: {
            args: Prisma.CategoriaTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoriaTask>
          }
          groupBy: {
            args: Prisma.CategoriaTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaTaskCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaTaskCountAggregateOutputType> | number
          }
        }
      }
      TaskPrincipal: {
        payload: Prisma.$TaskPrincipalPayload<ExtArgs>
        fields: Prisma.TaskPrincipalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskPrincipalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskPrincipalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          findFirst: {
            args: Prisma.TaskPrincipalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskPrincipalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          findMany: {
            args: Prisma.TaskPrincipalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>[]
          }
          create: {
            args: Prisma.TaskPrincipalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          createMany: {
            args: Prisma.TaskPrincipalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskPrincipalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>[]
          }
          delete: {
            args: Prisma.TaskPrincipalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          update: {
            args: Prisma.TaskPrincipalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          deleteMany: {
            args: Prisma.TaskPrincipalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskPrincipalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskPrincipalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPrincipalPayload>
          }
          aggregate: {
            args: Prisma.TaskPrincipalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskPrincipal>
          }
          groupBy: {
            args: Prisma.TaskPrincipalGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskPrincipalGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskPrincipalCountArgs<ExtArgs>
            result: $Utils.Optional<TaskPrincipalCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    tasks: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | UsuarioCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    tipos: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipos?: boolean | TaskCountOutputTypeCountTiposArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaTaskWhereInput
  }


  /**
   * Count Type CategoriaTaskCountOutputType
   */

  export type CategoriaTaskCountOutputType = {
    task: number
    taskPrincipal: number
  }

  export type CategoriaTaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | CategoriaTaskCountOutputTypeCountTaskArgs
    taskPrincipal?: boolean | CategoriaTaskCountOutputTypeCountTaskPrincipalArgs
  }

  // Custom InputTypes
  /**
   * CategoriaTaskCountOutputType without action
   */
  export type CategoriaTaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTaskCountOutputType
     */
    select?: CategoriaTaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaTaskCountOutputType without action
   */
  export type CategoriaTaskCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * CategoriaTaskCountOutputType without action
   */
  export type CategoriaTaskCountOutputTypeCountTaskPrincipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskPrincipalWhereInput
  }


  /**
   * Count Type TaskPrincipalCountOutputType
   */

  export type TaskPrincipalCountOutputType = {
    tipos: number
  }

  export type TaskPrincipalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipos?: boolean | TaskPrincipalCountOutputTypeCountTiposArgs
  }

  // Custom InputTypes
  /**
   * TaskPrincipalCountOutputType without action
   */
  export type TaskPrincipalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipalCountOutputType
     */
    select?: TaskPrincipalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskPrincipalCountOutputType without action
   */
  export type TaskPrincipalCountOutputTypeCountTiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaTaskWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    tasks?: boolean | Usuario$tasksArgs<ExtArgs>
    taskPrincipal?: boolean | Usuario$taskPrincipalArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | Usuario$tasksArgs<ExtArgs>
    taskPrincipal?: boolean | Usuario$taskPrincipalArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      taskPrincipal: Prisma.$TaskPrincipalPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends Usuario$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    taskPrincipal<T extends Usuario$taskPrincipalArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$taskPrincipalArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.tasks
   */
  export type Usuario$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Usuario.taskPrincipal
   */
  export type Usuario$taskPrincipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    where?: TaskPrincipalWhereInput
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    usuarioId: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    usuarioId: number
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
    tipos?: boolean | Task$tiposArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipos?: boolean | Task$tiposArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      tipos: Prisma.$CategoriaTaskPayload<ExtArgs>[]
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      usuarioId: number
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipos<T extends Task$tiposArgs<ExtArgs> = {}>(args?: Subset<T, Task$tiposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findMany"> | Null>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'Int'>
    readonly nome: FieldRef<"Task", 'String'>
    readonly descricao: FieldRef<"Task", 'String'>
    readonly usuarioId: FieldRef<"Task", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.tipos
   */
  export type Task$tiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    where?: CategoriaTaskWhereInput
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    cursor?: CategoriaTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaTaskScalarFieldEnum | CategoriaTaskScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model CategoriaTask
   */

  export type AggregateCategoriaTask = {
    _count: CategoriaTaskCountAggregateOutputType | null
    _avg: CategoriaTaskAvgAggregateOutputType | null
    _sum: CategoriaTaskSumAggregateOutputType | null
    _min: CategoriaTaskMinAggregateOutputType | null
    _max: CategoriaTaskMaxAggregateOutputType | null
  }

  export type CategoriaTaskAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaTaskSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaTaskMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaTaskMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaTaskCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type CategoriaTaskAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaTaskSumAggregateInputType = {
    id?: true
  }

  export type CategoriaTaskMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaTaskMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaTaskCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaTask to aggregate.
     */
    where?: CategoriaTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaTasks to fetch.
     */
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriaTasks
    **/
    _count?: true | CategoriaTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaTaskMaxAggregateInputType
  }

  export type GetCategoriaTaskAggregateType<T extends CategoriaTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriaTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriaTask[P]>
      : GetScalarType<T[P], AggregateCategoriaTask[P]>
  }




  export type CategoriaTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaTaskWhereInput
    orderBy?: CategoriaTaskOrderByWithAggregationInput | CategoriaTaskOrderByWithAggregationInput[]
    by: CategoriaTaskScalarFieldEnum[] | CategoriaTaskScalarFieldEnum
    having?: CategoriaTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaTaskCountAggregateInputType | true
    _avg?: CategoriaTaskAvgAggregateInputType
    _sum?: CategoriaTaskSumAggregateInputType
    _min?: CategoriaTaskMinAggregateInputType
    _max?: CategoriaTaskMaxAggregateInputType
  }

  export type CategoriaTaskGroupByOutputType = {
    id: number
    nome: string
    _count: CategoriaTaskCountAggregateOutputType | null
    _avg: CategoriaTaskAvgAggregateOutputType | null
    _sum: CategoriaTaskSumAggregateOutputType | null
    _min: CategoriaTaskMinAggregateOutputType | null
    _max: CategoriaTaskMaxAggregateOutputType | null
  }

  type GetCategoriaTaskGroupByPayload<T extends CategoriaTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaTaskGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaTaskGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    task?: boolean | CategoriaTask$taskArgs<ExtArgs>
    taskPrincipal?: boolean | CategoriaTask$taskPrincipalArgs<ExtArgs>
    _count?: boolean | CategoriaTaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaTask"]>

  export type CategoriaTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["categoriaTask"]>

  export type CategoriaTaskSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type CategoriaTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | CategoriaTask$taskArgs<ExtArgs>
    taskPrincipal?: boolean | CategoriaTask$taskPrincipalArgs<ExtArgs>
    _count?: boolean | CategoriaTaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoriaTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriaTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoriaTask"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>[]
      taskPrincipal: Prisma.$TaskPrincipalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["categoriaTask"]>
    composites: {}
  }

  type CategoriaTaskGetPayload<S extends boolean | null | undefined | CategoriaTaskDefaultArgs> = $Result.GetResult<Prisma.$CategoriaTaskPayload, S>

  type CategoriaTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaTaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaTaskCountAggregateInputType | true
    }

  export interface CategoriaTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoriaTask'], meta: { name: 'CategoriaTask' } }
    /**
     * Find zero or one CategoriaTask that matches the filter.
     * @param {CategoriaTaskFindUniqueArgs} args - Arguments to find a CategoriaTask
     * @example
     * // Get one CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaTaskFindUniqueArgs>(args: SelectSubset<T, CategoriaTaskFindUniqueArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CategoriaTask that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaTaskFindUniqueOrThrowArgs} args - Arguments to find a CategoriaTask
     * @example
     * // Get one CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CategoriaTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskFindFirstArgs} args - Arguments to find a CategoriaTask
     * @example
     * // Get one CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaTaskFindFirstArgs>(args?: SelectSubset<T, CategoriaTaskFindFirstArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CategoriaTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskFindFirstOrThrowArgs} args - Arguments to find a CategoriaTask
     * @example
     * // Get one CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CategoriaTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriaTasks
     * const categoriaTasks = await prisma.categoriaTask.findMany()
     * 
     * // Get first 10 CategoriaTasks
     * const categoriaTasks = await prisma.categoriaTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaTaskWithIdOnly = await prisma.categoriaTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaTaskFindManyArgs>(args?: SelectSubset<T, CategoriaTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CategoriaTask.
     * @param {CategoriaTaskCreateArgs} args - Arguments to create a CategoriaTask.
     * @example
     * // Create one CategoriaTask
     * const CategoriaTask = await prisma.categoriaTask.create({
     *   data: {
     *     // ... data to create a CategoriaTask
     *   }
     * })
     * 
     */
    create<T extends CategoriaTaskCreateArgs>(args: SelectSubset<T, CategoriaTaskCreateArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CategoriaTasks.
     * @param {CategoriaTaskCreateManyArgs} args - Arguments to create many CategoriaTasks.
     * @example
     * // Create many CategoriaTasks
     * const categoriaTask = await prisma.categoriaTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaTaskCreateManyArgs>(args?: SelectSubset<T, CategoriaTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoriaTasks and returns the data saved in the database.
     * @param {CategoriaTaskCreateManyAndReturnArgs} args - Arguments to create many CategoriaTasks.
     * @example
     * // Create many CategoriaTasks
     * const categoriaTask = await prisma.categoriaTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoriaTasks and only return the `id`
     * const categoriaTaskWithIdOnly = await prisma.categoriaTask.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CategoriaTask.
     * @param {CategoriaTaskDeleteArgs} args - Arguments to delete one CategoriaTask.
     * @example
     * // Delete one CategoriaTask
     * const CategoriaTask = await prisma.categoriaTask.delete({
     *   where: {
     *     // ... filter to delete one CategoriaTask
     *   }
     * })
     * 
     */
    delete<T extends CategoriaTaskDeleteArgs>(args: SelectSubset<T, CategoriaTaskDeleteArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CategoriaTask.
     * @param {CategoriaTaskUpdateArgs} args - Arguments to update one CategoriaTask.
     * @example
     * // Update one CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaTaskUpdateArgs>(args: SelectSubset<T, CategoriaTaskUpdateArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CategoriaTasks.
     * @param {CategoriaTaskDeleteManyArgs} args - Arguments to filter CategoriaTasks to delete.
     * @example
     * // Delete a few CategoriaTasks
     * const { count } = await prisma.categoriaTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaTaskDeleteManyArgs>(args?: SelectSubset<T, CategoriaTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriaTasks
     * const categoriaTask = await prisma.categoriaTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaTaskUpdateManyArgs>(args: SelectSubset<T, CategoriaTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriaTask.
     * @param {CategoriaTaskUpsertArgs} args - Arguments to update or create a CategoriaTask.
     * @example
     * // Update or create a CategoriaTask
     * const categoriaTask = await prisma.categoriaTask.upsert({
     *   create: {
     *     // ... data to create a CategoriaTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriaTask we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaTaskUpsertArgs>(args: SelectSubset<T, CategoriaTaskUpsertArgs<ExtArgs>>): Prisma__CategoriaTaskClient<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CategoriaTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskCountArgs} args - Arguments to filter CategoriaTasks to count.
     * @example
     * // Count the number of CategoriaTasks
     * const count = await prisma.categoriaTask.count({
     *   where: {
     *     // ... the filter for the CategoriaTasks we want to count
     *   }
     * })
    **/
    count<T extends CategoriaTaskCountArgs>(
      args?: Subset<T, CategoriaTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriaTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaTaskAggregateArgs>(args: Subset<T, CategoriaTaskAggregateArgs>): Prisma.PrismaPromise<GetCategoriaTaskAggregateType<T>>

    /**
     * Group by CategoriaTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaTaskGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoriaTask model
   */
  readonly fields: CategoriaTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriaTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends CategoriaTask$taskArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaTask$taskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    taskPrincipal<T extends CategoriaTask$taskPrincipalArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaTask$taskPrincipalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoriaTask model
   */ 
  interface CategoriaTaskFieldRefs {
    readonly id: FieldRef<"CategoriaTask", 'Int'>
    readonly nome: FieldRef<"CategoriaTask", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoriaTask findUnique
   */
  export type CategoriaTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaTask to fetch.
     */
    where: CategoriaTaskWhereUniqueInput
  }

  /**
   * CategoriaTask findUniqueOrThrow
   */
  export type CategoriaTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaTask to fetch.
     */
    where: CategoriaTaskWhereUniqueInput
  }

  /**
   * CategoriaTask findFirst
   */
  export type CategoriaTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaTask to fetch.
     */
    where?: CategoriaTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaTasks to fetch.
     */
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaTasks.
     */
    cursor?: CategoriaTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaTasks.
     */
    distinct?: CategoriaTaskScalarFieldEnum | CategoriaTaskScalarFieldEnum[]
  }

  /**
   * CategoriaTask findFirstOrThrow
   */
  export type CategoriaTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaTask to fetch.
     */
    where?: CategoriaTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaTasks to fetch.
     */
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaTasks.
     */
    cursor?: CategoriaTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaTasks.
     */
    distinct?: CategoriaTaskScalarFieldEnum | CategoriaTaskScalarFieldEnum[]
  }

  /**
   * CategoriaTask findMany
   */
  export type CategoriaTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaTasks to fetch.
     */
    where?: CategoriaTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaTasks to fetch.
     */
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriaTasks.
     */
    cursor?: CategoriaTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaTasks.
     */
    skip?: number
    distinct?: CategoriaTaskScalarFieldEnum | CategoriaTaskScalarFieldEnum[]
  }

  /**
   * CategoriaTask create
   */
  export type CategoriaTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoriaTask.
     */
    data: XOR<CategoriaTaskCreateInput, CategoriaTaskUncheckedCreateInput>
  }

  /**
   * CategoriaTask createMany
   */
  export type CategoriaTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoriaTasks.
     */
    data: CategoriaTaskCreateManyInput | CategoriaTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaTask createManyAndReturn
   */
  export type CategoriaTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CategoriaTasks.
     */
    data: CategoriaTaskCreateManyInput | CategoriaTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaTask update
   */
  export type CategoriaTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoriaTask.
     */
    data: XOR<CategoriaTaskUpdateInput, CategoriaTaskUncheckedUpdateInput>
    /**
     * Choose, which CategoriaTask to update.
     */
    where: CategoriaTaskWhereUniqueInput
  }

  /**
   * CategoriaTask updateMany
   */
  export type CategoriaTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoriaTasks.
     */
    data: XOR<CategoriaTaskUpdateManyMutationInput, CategoriaTaskUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaTasks to update
     */
    where?: CategoriaTaskWhereInput
  }

  /**
   * CategoriaTask upsert
   */
  export type CategoriaTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoriaTask to update in case it exists.
     */
    where: CategoriaTaskWhereUniqueInput
    /**
     * In case the CategoriaTask found by the `where` argument doesn't exist, create a new CategoriaTask with this data.
     */
    create: XOR<CategoriaTaskCreateInput, CategoriaTaskUncheckedCreateInput>
    /**
     * In case the CategoriaTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaTaskUpdateInput, CategoriaTaskUncheckedUpdateInput>
  }

  /**
   * CategoriaTask delete
   */
  export type CategoriaTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    /**
     * Filter which CategoriaTask to delete.
     */
    where: CategoriaTaskWhereUniqueInput
  }

  /**
   * CategoriaTask deleteMany
   */
  export type CategoriaTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaTasks to delete
     */
    where?: CategoriaTaskWhereInput
  }

  /**
   * CategoriaTask.task
   */
  export type CategoriaTask$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * CategoriaTask.taskPrincipal
   */
  export type CategoriaTask$taskPrincipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    where?: TaskPrincipalWhereInput
    orderBy?: TaskPrincipalOrderByWithRelationInput | TaskPrincipalOrderByWithRelationInput[]
    cursor?: TaskPrincipalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskPrincipalScalarFieldEnum | TaskPrincipalScalarFieldEnum[]
  }

  /**
   * CategoriaTask without action
   */
  export type CategoriaTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
  }


  /**
   * Model TaskPrincipal
   */

  export type AggregateTaskPrincipal = {
    _count: TaskPrincipalCountAggregateOutputType | null
    _avg: TaskPrincipalAvgAggregateOutputType | null
    _sum: TaskPrincipalSumAggregateOutputType | null
    _min: TaskPrincipalMinAggregateOutputType | null
    _max: TaskPrincipalMaxAggregateOutputType | null
  }

  export type TaskPrincipalAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type TaskPrincipalSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type TaskPrincipalMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type TaskPrincipalMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    usuarioId: number | null
  }

  export type TaskPrincipalCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    usuarioId: number
    _all: number
  }


  export type TaskPrincipalAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type TaskPrincipalSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type TaskPrincipalMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
  }

  export type TaskPrincipalMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
  }

  export type TaskPrincipalCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    usuarioId?: true
    _all?: true
  }

  export type TaskPrincipalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskPrincipal to aggregate.
     */
    where?: TaskPrincipalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPrincipals to fetch.
     */
    orderBy?: TaskPrincipalOrderByWithRelationInput | TaskPrincipalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskPrincipalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPrincipals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPrincipals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskPrincipals
    **/
    _count?: true | TaskPrincipalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskPrincipalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskPrincipalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskPrincipalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskPrincipalMaxAggregateInputType
  }

  export type GetTaskPrincipalAggregateType<T extends TaskPrincipalAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskPrincipal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskPrincipal[P]>
      : GetScalarType<T[P], AggregateTaskPrincipal[P]>
  }




  export type TaskPrincipalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskPrincipalWhereInput
    orderBy?: TaskPrincipalOrderByWithAggregationInput | TaskPrincipalOrderByWithAggregationInput[]
    by: TaskPrincipalScalarFieldEnum[] | TaskPrincipalScalarFieldEnum
    having?: TaskPrincipalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskPrincipalCountAggregateInputType | true
    _avg?: TaskPrincipalAvgAggregateInputType
    _sum?: TaskPrincipalSumAggregateInputType
    _min?: TaskPrincipalMinAggregateInputType
    _max?: TaskPrincipalMaxAggregateInputType
  }

  export type TaskPrincipalGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    usuarioId: number
    _count: TaskPrincipalCountAggregateOutputType | null
    _avg: TaskPrincipalAvgAggregateOutputType | null
    _sum: TaskPrincipalSumAggregateOutputType | null
    _min: TaskPrincipalMinAggregateOutputType | null
    _max: TaskPrincipalMaxAggregateOutputType | null
  }

  type GetTaskPrincipalGroupByPayload<T extends TaskPrincipalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskPrincipalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskPrincipalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskPrincipalGroupByOutputType[P]>
            : GetScalarType<T[P], TaskPrincipalGroupByOutputType[P]>
        }
      >
    >


  export type TaskPrincipalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
    tipos?: boolean | TaskPrincipal$tiposArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    _count?: boolean | TaskPrincipalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskPrincipal"]>

  export type TaskPrincipalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskPrincipal"]>

  export type TaskPrincipalSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    usuarioId?: boolean
  }

  export type TaskPrincipalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipos?: boolean | TaskPrincipal$tiposArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    _count?: boolean | TaskPrincipalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskPrincipalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $TaskPrincipalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskPrincipal"
    objects: {
      tipos: Prisma.$CategoriaTaskPayload<ExtArgs>[]
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      usuarioId: number
    }, ExtArgs["result"]["taskPrincipal"]>
    composites: {}
  }

  type TaskPrincipalGetPayload<S extends boolean | null | undefined | TaskPrincipalDefaultArgs> = $Result.GetResult<Prisma.$TaskPrincipalPayload, S>

  type TaskPrincipalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskPrincipalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskPrincipalCountAggregateInputType | true
    }

  export interface TaskPrincipalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskPrincipal'], meta: { name: 'TaskPrincipal' } }
    /**
     * Find zero or one TaskPrincipal that matches the filter.
     * @param {TaskPrincipalFindUniqueArgs} args - Arguments to find a TaskPrincipal
     * @example
     * // Get one TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskPrincipalFindUniqueArgs>(args: SelectSubset<T, TaskPrincipalFindUniqueArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TaskPrincipal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskPrincipalFindUniqueOrThrowArgs} args - Arguments to find a TaskPrincipal
     * @example
     * // Get one TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskPrincipalFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskPrincipalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TaskPrincipal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalFindFirstArgs} args - Arguments to find a TaskPrincipal
     * @example
     * // Get one TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskPrincipalFindFirstArgs>(args?: SelectSubset<T, TaskPrincipalFindFirstArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TaskPrincipal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalFindFirstOrThrowArgs} args - Arguments to find a TaskPrincipal
     * @example
     * // Get one TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskPrincipalFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskPrincipalFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TaskPrincipals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskPrincipals
     * const taskPrincipals = await prisma.taskPrincipal.findMany()
     * 
     * // Get first 10 TaskPrincipals
     * const taskPrincipals = await prisma.taskPrincipal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskPrincipalWithIdOnly = await prisma.taskPrincipal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskPrincipalFindManyArgs>(args?: SelectSubset<T, TaskPrincipalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TaskPrincipal.
     * @param {TaskPrincipalCreateArgs} args - Arguments to create a TaskPrincipal.
     * @example
     * // Create one TaskPrincipal
     * const TaskPrincipal = await prisma.taskPrincipal.create({
     *   data: {
     *     // ... data to create a TaskPrincipal
     *   }
     * })
     * 
     */
    create<T extends TaskPrincipalCreateArgs>(args: SelectSubset<T, TaskPrincipalCreateArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TaskPrincipals.
     * @param {TaskPrincipalCreateManyArgs} args - Arguments to create many TaskPrincipals.
     * @example
     * // Create many TaskPrincipals
     * const taskPrincipal = await prisma.taskPrincipal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskPrincipalCreateManyArgs>(args?: SelectSubset<T, TaskPrincipalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskPrincipals and returns the data saved in the database.
     * @param {TaskPrincipalCreateManyAndReturnArgs} args - Arguments to create many TaskPrincipals.
     * @example
     * // Create many TaskPrincipals
     * const taskPrincipal = await prisma.taskPrincipal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskPrincipals and only return the `id`
     * const taskPrincipalWithIdOnly = await prisma.taskPrincipal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskPrincipalCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskPrincipalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TaskPrincipal.
     * @param {TaskPrincipalDeleteArgs} args - Arguments to delete one TaskPrincipal.
     * @example
     * // Delete one TaskPrincipal
     * const TaskPrincipal = await prisma.taskPrincipal.delete({
     *   where: {
     *     // ... filter to delete one TaskPrincipal
     *   }
     * })
     * 
     */
    delete<T extends TaskPrincipalDeleteArgs>(args: SelectSubset<T, TaskPrincipalDeleteArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TaskPrincipal.
     * @param {TaskPrincipalUpdateArgs} args - Arguments to update one TaskPrincipal.
     * @example
     * // Update one TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskPrincipalUpdateArgs>(args: SelectSubset<T, TaskPrincipalUpdateArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TaskPrincipals.
     * @param {TaskPrincipalDeleteManyArgs} args - Arguments to filter TaskPrincipals to delete.
     * @example
     * // Delete a few TaskPrincipals
     * const { count } = await prisma.taskPrincipal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskPrincipalDeleteManyArgs>(args?: SelectSubset<T, TaskPrincipalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskPrincipals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskPrincipals
     * const taskPrincipal = await prisma.taskPrincipal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskPrincipalUpdateManyArgs>(args: SelectSubset<T, TaskPrincipalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TaskPrincipal.
     * @param {TaskPrincipalUpsertArgs} args - Arguments to update or create a TaskPrincipal.
     * @example
     * // Update or create a TaskPrincipal
     * const taskPrincipal = await prisma.taskPrincipal.upsert({
     *   create: {
     *     // ... data to create a TaskPrincipal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskPrincipal we want to update
     *   }
     * })
     */
    upsert<T extends TaskPrincipalUpsertArgs>(args: SelectSubset<T, TaskPrincipalUpsertArgs<ExtArgs>>): Prisma__TaskPrincipalClient<$Result.GetResult<Prisma.$TaskPrincipalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TaskPrincipals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalCountArgs} args - Arguments to filter TaskPrincipals to count.
     * @example
     * // Count the number of TaskPrincipals
     * const count = await prisma.taskPrincipal.count({
     *   where: {
     *     // ... the filter for the TaskPrincipals we want to count
     *   }
     * })
    **/
    count<T extends TaskPrincipalCountArgs>(
      args?: Subset<T, TaskPrincipalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskPrincipalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskPrincipal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskPrincipalAggregateArgs>(args: Subset<T, TaskPrincipalAggregateArgs>): Prisma.PrismaPromise<GetTaskPrincipalAggregateType<T>>

    /**
     * Group by TaskPrincipal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskPrincipalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskPrincipalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskPrincipalGroupByArgs['orderBy'] }
        : { orderBy?: TaskPrincipalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskPrincipalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskPrincipalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskPrincipal model
   */
  readonly fields: TaskPrincipalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskPrincipal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskPrincipalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipos<T extends TaskPrincipal$tiposArgs<ExtArgs> = {}>(args?: Subset<T, TaskPrincipal$tiposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaTaskPayload<ExtArgs>, T, "findMany"> | Null>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskPrincipal model
   */ 
  interface TaskPrincipalFieldRefs {
    readonly id: FieldRef<"TaskPrincipal", 'Int'>
    readonly nome: FieldRef<"TaskPrincipal", 'String'>
    readonly descricao: FieldRef<"TaskPrincipal", 'String'>
    readonly usuarioId: FieldRef<"TaskPrincipal", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TaskPrincipal findUnique
   */
  export type TaskPrincipalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter, which TaskPrincipal to fetch.
     */
    where: TaskPrincipalWhereUniqueInput
  }

  /**
   * TaskPrincipal findUniqueOrThrow
   */
  export type TaskPrincipalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter, which TaskPrincipal to fetch.
     */
    where: TaskPrincipalWhereUniqueInput
  }

  /**
   * TaskPrincipal findFirst
   */
  export type TaskPrincipalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter, which TaskPrincipal to fetch.
     */
    where?: TaskPrincipalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPrincipals to fetch.
     */
    orderBy?: TaskPrincipalOrderByWithRelationInput | TaskPrincipalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskPrincipals.
     */
    cursor?: TaskPrincipalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPrincipals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPrincipals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskPrincipals.
     */
    distinct?: TaskPrincipalScalarFieldEnum | TaskPrincipalScalarFieldEnum[]
  }

  /**
   * TaskPrincipal findFirstOrThrow
   */
  export type TaskPrincipalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter, which TaskPrincipal to fetch.
     */
    where?: TaskPrincipalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPrincipals to fetch.
     */
    orderBy?: TaskPrincipalOrderByWithRelationInput | TaskPrincipalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskPrincipals.
     */
    cursor?: TaskPrincipalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPrincipals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPrincipals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskPrincipals.
     */
    distinct?: TaskPrincipalScalarFieldEnum | TaskPrincipalScalarFieldEnum[]
  }

  /**
   * TaskPrincipal findMany
   */
  export type TaskPrincipalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter, which TaskPrincipals to fetch.
     */
    where?: TaskPrincipalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskPrincipals to fetch.
     */
    orderBy?: TaskPrincipalOrderByWithRelationInput | TaskPrincipalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskPrincipals.
     */
    cursor?: TaskPrincipalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskPrincipals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskPrincipals.
     */
    skip?: number
    distinct?: TaskPrincipalScalarFieldEnum | TaskPrincipalScalarFieldEnum[]
  }

  /**
   * TaskPrincipal create
   */
  export type TaskPrincipalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskPrincipal.
     */
    data: XOR<TaskPrincipalCreateInput, TaskPrincipalUncheckedCreateInput>
  }

  /**
   * TaskPrincipal createMany
   */
  export type TaskPrincipalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskPrincipals.
     */
    data: TaskPrincipalCreateManyInput | TaskPrincipalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskPrincipal createManyAndReturn
   */
  export type TaskPrincipalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TaskPrincipals.
     */
    data: TaskPrincipalCreateManyInput | TaskPrincipalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskPrincipal update
   */
  export type TaskPrincipalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskPrincipal.
     */
    data: XOR<TaskPrincipalUpdateInput, TaskPrincipalUncheckedUpdateInput>
    /**
     * Choose, which TaskPrincipal to update.
     */
    where: TaskPrincipalWhereUniqueInput
  }

  /**
   * TaskPrincipal updateMany
   */
  export type TaskPrincipalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskPrincipals.
     */
    data: XOR<TaskPrincipalUpdateManyMutationInput, TaskPrincipalUncheckedUpdateManyInput>
    /**
     * Filter which TaskPrincipals to update
     */
    where?: TaskPrincipalWhereInput
  }

  /**
   * TaskPrincipal upsert
   */
  export type TaskPrincipalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskPrincipal to update in case it exists.
     */
    where: TaskPrincipalWhereUniqueInput
    /**
     * In case the TaskPrincipal found by the `where` argument doesn't exist, create a new TaskPrincipal with this data.
     */
    create: XOR<TaskPrincipalCreateInput, TaskPrincipalUncheckedCreateInput>
    /**
     * In case the TaskPrincipal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskPrincipalUpdateInput, TaskPrincipalUncheckedUpdateInput>
  }

  /**
   * TaskPrincipal delete
   */
  export type TaskPrincipalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
    /**
     * Filter which TaskPrincipal to delete.
     */
    where: TaskPrincipalWhereUniqueInput
  }

  /**
   * TaskPrincipal deleteMany
   */
  export type TaskPrincipalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskPrincipals to delete
     */
    where?: TaskPrincipalWhereInput
  }

  /**
   * TaskPrincipal.tipos
   */
  export type TaskPrincipal$tiposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaTask
     */
    select?: CategoriaTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaTaskInclude<ExtArgs> | null
    where?: CategoriaTaskWhereInput
    orderBy?: CategoriaTaskOrderByWithRelationInput | CategoriaTaskOrderByWithRelationInput[]
    cursor?: CategoriaTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaTaskScalarFieldEnum | CategoriaTaskScalarFieldEnum[]
  }

  /**
   * TaskPrincipal without action
   */
  export type TaskPrincipalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskPrincipal
     */
    select?: TaskPrincipalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskPrincipalInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    nomeTabela: string | null
    operacao: string | null
    data: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    nomeTabela: string | null
    operacao: string | null
    data: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    nomeTabela: number
    operacao: number
    antiga: number
    nova: number
    data: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    nomeTabela?: true
    operacao?: true
    data?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    nomeTabela?: true
    operacao?: true
    data?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    nomeTabela?: true
    operacao?: true
    antiga?: true
    nova?: true
    data?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    nomeTabela: string
    operacao: string
    antiga: JsonValue | null
    nova: JsonValue | null
    data: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomeTabela?: boolean
    operacao?: boolean
    antiga?: boolean
    nova?: boolean
    data?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomeTabela?: boolean
    operacao?: boolean
    antiga?: boolean
    nova?: boolean
    data?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    nomeTabela?: boolean
    operacao?: boolean
    antiga?: boolean
    nova?: boolean
    data?: boolean
  }


  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nomeTabela: string
      operacao: string
      antiga: Prisma.JsonValue | null
      nova: Prisma.JsonValue | null
      data: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */ 
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly nomeTabela: FieldRef<"Log", 'String'>
    readonly operacao: FieldRef<"Log", 'String'>
    readonly antiga: FieldRef<"Log", 'Json'>
    readonly nova: FieldRef<"Log", 'Json'>
    readonly data: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    usuarioId: 'usuarioId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const CategoriaTaskScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaTaskScalarFieldEnum = (typeof CategoriaTaskScalarFieldEnum)[keyof typeof CategoriaTaskScalarFieldEnum]


  export const TaskPrincipalScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    usuarioId: 'usuarioId'
  };

  export type TaskPrincipalScalarFieldEnum = (typeof TaskPrincipalScalarFieldEnum)[keyof typeof TaskPrincipalScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    nomeTabela: 'nomeTabela',
    operacao: 'operacao',
    antiga: 'antiga',
    nova: 'nova',
    data: 'data'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    tasks?: TaskListRelationFilter
    taskPrincipal?: XOR<TaskPrincipalNullableRelationFilter, TaskPrincipalWhereInput> | null
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    tasks?: TaskOrderByRelationAggregateInput
    taskPrincipal?: TaskPrincipalOrderByWithRelationInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    tasks?: TaskListRelationFilter
    taskPrincipal?: XOR<TaskPrincipalNullableRelationFilter, TaskPrincipalWhereInput> | null
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: IntFilter<"Task"> | number
    nome?: StringFilter<"Task"> | string
    descricao?: StringFilter<"Task"> | string
    usuarioId?: IntFilter<"Task"> | number
    tipos?: CategoriaTaskListRelationFilter
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    tipos?: CategoriaTaskOrderByRelationAggregateInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    descricao?: StringFilter<"Task"> | string
    usuarioId?: IntFilter<"Task"> | number
    tipos?: CategoriaTaskListRelationFilter
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "nome">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Task"> | number
    nome?: StringWithAggregatesFilter<"Task"> | string
    descricao?: StringWithAggregatesFilter<"Task"> | string
    usuarioId?: IntWithAggregatesFilter<"Task"> | number
  }

  export type CategoriaTaskWhereInput = {
    AND?: CategoriaTaskWhereInput | CategoriaTaskWhereInput[]
    OR?: CategoriaTaskWhereInput[]
    NOT?: CategoriaTaskWhereInput | CategoriaTaskWhereInput[]
    id?: IntFilter<"CategoriaTask"> | number
    nome?: StringFilter<"CategoriaTask"> | string
    task?: TaskListRelationFilter
    taskPrincipal?: TaskPrincipalListRelationFilter
  }

  export type CategoriaTaskOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    task?: TaskOrderByRelationAggregateInput
    taskPrincipal?: TaskPrincipalOrderByRelationAggregateInput
  }

  export type CategoriaTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: CategoriaTaskWhereInput | CategoriaTaskWhereInput[]
    OR?: CategoriaTaskWhereInput[]
    NOT?: CategoriaTaskWhereInput | CategoriaTaskWhereInput[]
    task?: TaskListRelationFilter
    taskPrincipal?: TaskPrincipalListRelationFilter
  }, "id" | "nome">

  export type CategoriaTaskOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: CategoriaTaskCountOrderByAggregateInput
    _avg?: CategoriaTaskAvgOrderByAggregateInput
    _max?: CategoriaTaskMaxOrderByAggregateInput
    _min?: CategoriaTaskMinOrderByAggregateInput
    _sum?: CategoriaTaskSumOrderByAggregateInput
  }

  export type CategoriaTaskScalarWhereWithAggregatesInput = {
    AND?: CategoriaTaskScalarWhereWithAggregatesInput | CategoriaTaskScalarWhereWithAggregatesInput[]
    OR?: CategoriaTaskScalarWhereWithAggregatesInput[]
    NOT?: CategoriaTaskScalarWhereWithAggregatesInput | CategoriaTaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoriaTask"> | number
    nome?: StringWithAggregatesFilter<"CategoriaTask"> | string
  }

  export type TaskPrincipalWhereInput = {
    AND?: TaskPrincipalWhereInput | TaskPrincipalWhereInput[]
    OR?: TaskPrincipalWhereInput[]
    NOT?: TaskPrincipalWhereInput | TaskPrincipalWhereInput[]
    id?: IntFilter<"TaskPrincipal"> | number
    nome?: StringFilter<"TaskPrincipal"> | string
    descricao?: StringFilter<"TaskPrincipal"> | string
    usuarioId?: IntFilter<"TaskPrincipal"> | number
    tipos?: CategoriaTaskListRelationFilter
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type TaskPrincipalOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    tipos?: CategoriaTaskOrderByRelationAggregateInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type TaskPrincipalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    AND?: TaskPrincipalWhereInput | TaskPrincipalWhereInput[]
    OR?: TaskPrincipalWhereInput[]
    NOT?: TaskPrincipalWhereInput | TaskPrincipalWhereInput[]
    nome?: StringFilter<"TaskPrincipal"> | string
    descricao?: StringFilter<"TaskPrincipal"> | string
    tipos?: CategoriaTaskListRelationFilter
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "usuarioId">

  export type TaskPrincipalOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
    _count?: TaskPrincipalCountOrderByAggregateInput
    _avg?: TaskPrincipalAvgOrderByAggregateInput
    _max?: TaskPrincipalMaxOrderByAggregateInput
    _min?: TaskPrincipalMinOrderByAggregateInput
    _sum?: TaskPrincipalSumOrderByAggregateInput
  }

  export type TaskPrincipalScalarWhereWithAggregatesInput = {
    AND?: TaskPrincipalScalarWhereWithAggregatesInput | TaskPrincipalScalarWhereWithAggregatesInput[]
    OR?: TaskPrincipalScalarWhereWithAggregatesInput[]
    NOT?: TaskPrincipalScalarWhereWithAggregatesInput | TaskPrincipalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskPrincipal"> | number
    nome?: StringWithAggregatesFilter<"TaskPrincipal"> | string
    descricao?: StringWithAggregatesFilter<"TaskPrincipal"> | string
    usuarioId?: IntWithAggregatesFilter<"TaskPrincipal"> | number
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    nomeTabela?: StringFilter<"Log"> | string
    operacao?: StringFilter<"Log"> | string
    antiga?: JsonNullableFilter<"Log">
    nova?: JsonNullableFilter<"Log">
    data?: DateTimeFilter<"Log"> | Date | string
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    nomeTabela?: SortOrder
    operacao?: SortOrder
    antiga?: SortOrderInput | SortOrder
    nova?: SortOrderInput | SortOrder
    data?: SortOrder
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    nomeTabela?: StringFilter<"Log"> | string
    operacao?: StringFilter<"Log"> | string
    antiga?: JsonNullableFilter<"Log">
    nova?: JsonNullableFilter<"Log">
    data?: DateTimeFilter<"Log"> | Date | string
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    nomeTabela?: SortOrder
    operacao?: SortOrder
    antiga?: SortOrderInput | SortOrder
    nova?: SortOrderInput | SortOrder
    data?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    nomeTabela?: StringWithAggregatesFilter<"Log"> | string
    operacao?: StringWithAggregatesFilter<"Log"> | string
    antiga?: JsonNullableWithAggregatesFilter<"Log">
    nova?: JsonNullableWithAggregatesFilter<"Log">
    data?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    tasks?: TaskCreateNestedManyWithoutUsuarioInput
    taskPrincipal?: TaskPrincipalCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    tasks?: TaskUncheckedCreateNestedManyWithoutUsuarioInput
    taskPrincipal?: TaskPrincipalUncheckedCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUpdateManyWithoutUsuarioNestedInput
    taskPrincipal?: TaskPrincipalUpdateOneWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutUsuarioNestedInput
    taskPrincipal?: TaskPrincipalUncheckedUpdateOneWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateInput = {
    nome: string
    descricao: string
    tipos?: CategoriaTaskCreateNestedManyWithoutTaskInput
    usuario: UsuarioCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
    tipos?: CategoriaTaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUpdateManyWithoutTaskNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipos?: CategoriaTaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
  }

  export type TaskUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaTaskCreateInput = {
    nome: string
    task?: TaskCreateNestedManyWithoutTiposInput
    taskPrincipal?: TaskPrincipalCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskUncheckedCreateInput = {
    id?: number
    nome: string
    task?: TaskUncheckedCreateNestedManyWithoutTiposInput
    taskPrincipal?: TaskPrincipalUncheckedCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    task?: TaskUpdateManyWithoutTiposNestedInput
    taskPrincipal?: TaskPrincipalUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    task?: TaskUncheckedUpdateManyWithoutTiposNestedInput
    taskPrincipal?: TaskPrincipalUncheckedUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskCreateManyInput = {
    id?: number
    nome: string
  }

  export type CategoriaTaskUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaTaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TaskPrincipalCreateInput = {
    nome: string
    descricao: string
    tipos?: CategoriaTaskCreateNestedManyWithoutTaskPrincipalInput
    usuario: UsuarioCreateNestedOneWithoutTaskPrincipalInput
  }

  export type TaskPrincipalUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
    tipos?: CategoriaTaskUncheckedCreateNestedManyWithoutTaskPrincipalInput
  }

  export type TaskPrincipalUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUpdateManyWithoutTaskPrincipalNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutTaskPrincipalNestedInput
  }

  export type TaskPrincipalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipos?: CategoriaTaskUncheckedUpdateManyWithoutTaskPrincipalNestedInput
  }

  export type TaskPrincipalCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
  }

  export type TaskPrincipalUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type TaskPrincipalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type LogCreateInput = {
    nomeTabela: string
    operacao: string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: Date | string
  }

  export type LogUncheckedCreateInput = {
    id?: number
    nomeTabela: string
    operacao: string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: Date | string
  }

  export type LogUpdateInput = {
    nomeTabela?: StringFieldUpdateOperationsInput | string
    operacao?: StringFieldUpdateOperationsInput | string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeTabela?: StringFieldUpdateOperationsInput | string
    operacao?: StringFieldUpdateOperationsInput | string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    nomeTabela: string
    operacao: string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    nomeTabela?: StringFieldUpdateOperationsInput | string
    operacao?: StringFieldUpdateOperationsInput | string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeTabela?: StringFieldUpdateOperationsInput | string
    operacao?: StringFieldUpdateOperationsInput | string
    antiga?: NullableJsonNullValueInput | InputJsonValue
    nova?: NullableJsonNullValueInput | InputJsonValue
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskPrincipalNullableRelationFilter = {
    is?: TaskPrincipalWhereInput | null
    isNot?: TaskPrincipalWhereInput | null
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CategoriaTaskListRelationFilter = {
    every?: CategoriaTaskWhereInput
    some?: CategoriaTaskWhereInput
    none?: CategoriaTaskWhereInput
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type CategoriaTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskPrincipalListRelationFilter = {
    every?: TaskPrincipalWhereInput
    some?: TaskPrincipalWhereInput
    none?: TaskPrincipalWhereInput
  }

  export type TaskPrincipalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaTaskCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaTaskAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaTaskMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaTaskSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TaskPrincipalCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskPrincipalAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskPrincipalMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskPrincipalMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    usuarioId?: SortOrder
  }

  export type TaskPrincipalSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    nomeTabela?: SortOrder
    operacao?: SortOrder
    antiga?: SortOrder
    nova?: SortOrder
    data?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeTabela?: SortOrder
    operacao?: SortOrder
    data?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    nomeTabela?: SortOrder
    operacao?: SortOrder
    data?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TaskCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput> | TaskCreateWithoutUsuarioInput[] | TaskUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUsuarioInput | TaskCreateOrConnectWithoutUsuarioInput[]
    createMany?: TaskCreateManyUsuarioInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskPrincipalCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutUsuarioInput
    connect?: TaskPrincipalWhereUniqueInput
  }

  export type TaskUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput> | TaskCreateWithoutUsuarioInput[] | TaskUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUsuarioInput | TaskCreateOrConnectWithoutUsuarioInput[]
    createMany?: TaskCreateManyUsuarioInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskPrincipalUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutUsuarioInput
    connect?: TaskPrincipalWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TaskUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput> | TaskCreateWithoutUsuarioInput[] | TaskUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUsuarioInput | TaskCreateOrConnectWithoutUsuarioInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUsuarioInput | TaskUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TaskCreateManyUsuarioInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUsuarioInput | TaskUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUsuarioInput | TaskUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskPrincipalUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutUsuarioInput
    upsert?: TaskPrincipalUpsertWithoutUsuarioInput
    disconnect?: TaskPrincipalWhereInput | boolean
    delete?: TaskPrincipalWhereInput | boolean
    connect?: TaskPrincipalWhereUniqueInput
    update?: XOR<XOR<TaskPrincipalUpdateToOneWithWhereWithoutUsuarioInput, TaskPrincipalUpdateWithoutUsuarioInput>, TaskPrincipalUncheckedUpdateWithoutUsuarioInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TaskUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput> | TaskCreateWithoutUsuarioInput[] | TaskUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutUsuarioInput | TaskCreateOrConnectWithoutUsuarioInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutUsuarioInput | TaskUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TaskCreateManyUsuarioInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutUsuarioInput | TaskUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutUsuarioInput | TaskUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskPrincipalUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutUsuarioInput
    upsert?: TaskPrincipalUpsertWithoutUsuarioInput
    disconnect?: TaskPrincipalWhereInput | boolean
    delete?: TaskPrincipalWhereInput | boolean
    connect?: TaskPrincipalWhereUniqueInput
    update?: XOR<XOR<TaskPrincipalUpdateToOneWithWhereWithoutUsuarioInput, TaskPrincipalUpdateWithoutUsuarioInput>, TaskPrincipalUncheckedUpdateWithoutUsuarioInput>
  }

  export type CategoriaTaskCreateNestedManyWithoutTaskInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput> | CategoriaTaskCreateWithoutTaskInput[] | CategoriaTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskInput | CategoriaTaskCreateOrConnectWithoutTaskInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
  }

  export type UsuarioCreateNestedOneWithoutTasksInput = {
    create?: XOR<UsuarioCreateWithoutTasksInput, UsuarioUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTasksInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CategoriaTaskUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput> | CategoriaTaskCreateWithoutTaskInput[] | CategoriaTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskInput | CategoriaTaskCreateOrConnectWithoutTaskInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
  }

  export type CategoriaTaskUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput> | CategoriaTaskCreateWithoutTaskInput[] | CategoriaTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskInput | CategoriaTaskCreateOrConnectWithoutTaskInput[]
    upsert?: CategoriaTaskUpsertWithWhereUniqueWithoutTaskInput | CategoriaTaskUpsertWithWhereUniqueWithoutTaskInput[]
    set?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    disconnect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    delete?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    update?: CategoriaTaskUpdateWithWhereUniqueWithoutTaskInput | CategoriaTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CategoriaTaskUpdateManyWithWhereWithoutTaskInput | CategoriaTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UsuarioCreateWithoutTasksInput, UsuarioUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTasksInput
    upsert?: UsuarioUpsertWithoutTasksInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTasksInput, UsuarioUpdateWithoutTasksInput>, UsuarioUncheckedUpdateWithoutTasksInput>
  }

  export type CategoriaTaskUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput> | CategoriaTaskCreateWithoutTaskInput[] | CategoriaTaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskInput | CategoriaTaskCreateOrConnectWithoutTaskInput[]
    upsert?: CategoriaTaskUpsertWithWhereUniqueWithoutTaskInput | CategoriaTaskUpsertWithWhereUniqueWithoutTaskInput[]
    set?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    disconnect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    delete?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    update?: CategoriaTaskUpdateWithWhereUniqueWithoutTaskInput | CategoriaTaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CategoriaTaskUpdateManyWithWhereWithoutTaskInput | CategoriaTaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
  }

  export type TaskCreateNestedManyWithoutTiposInput = {
    create?: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput> | TaskCreateWithoutTiposInput[] | TaskUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutTiposInput | TaskCreateOrConnectWithoutTiposInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskPrincipalCreateNestedManyWithoutTiposInput = {
    create?: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput> | TaskPrincipalCreateWithoutTiposInput[] | TaskPrincipalUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutTiposInput | TaskPrincipalCreateOrConnectWithoutTiposInput[]
    connect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutTiposInput = {
    create?: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput> | TaskCreateWithoutTiposInput[] | TaskUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutTiposInput | TaskCreateOrConnectWithoutTiposInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskPrincipalUncheckedCreateNestedManyWithoutTiposInput = {
    create?: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput> | TaskPrincipalCreateWithoutTiposInput[] | TaskPrincipalUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutTiposInput | TaskPrincipalCreateOrConnectWithoutTiposInput[]
    connect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
  }

  export type TaskUpdateManyWithoutTiposNestedInput = {
    create?: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput> | TaskCreateWithoutTiposInput[] | TaskUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutTiposInput | TaskCreateOrConnectWithoutTiposInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutTiposInput | TaskUpsertWithWhereUniqueWithoutTiposInput[]
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutTiposInput | TaskUpdateWithWhereUniqueWithoutTiposInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutTiposInput | TaskUpdateManyWithWhereWithoutTiposInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskPrincipalUpdateManyWithoutTiposNestedInput = {
    create?: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput> | TaskPrincipalCreateWithoutTiposInput[] | TaskPrincipalUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutTiposInput | TaskPrincipalCreateOrConnectWithoutTiposInput[]
    upsert?: TaskPrincipalUpsertWithWhereUniqueWithoutTiposInput | TaskPrincipalUpsertWithWhereUniqueWithoutTiposInput[]
    set?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    disconnect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    delete?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    connect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    update?: TaskPrincipalUpdateWithWhereUniqueWithoutTiposInput | TaskPrincipalUpdateWithWhereUniqueWithoutTiposInput[]
    updateMany?: TaskPrincipalUpdateManyWithWhereWithoutTiposInput | TaskPrincipalUpdateManyWithWhereWithoutTiposInput[]
    deleteMany?: TaskPrincipalScalarWhereInput | TaskPrincipalScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutTiposNestedInput = {
    create?: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput> | TaskCreateWithoutTiposInput[] | TaskUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutTiposInput | TaskCreateOrConnectWithoutTiposInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutTiposInput | TaskUpsertWithWhereUniqueWithoutTiposInput[]
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutTiposInput | TaskUpdateWithWhereUniqueWithoutTiposInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutTiposInput | TaskUpdateManyWithWhereWithoutTiposInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskPrincipalUncheckedUpdateManyWithoutTiposNestedInput = {
    create?: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput> | TaskPrincipalCreateWithoutTiposInput[] | TaskPrincipalUncheckedCreateWithoutTiposInput[]
    connectOrCreate?: TaskPrincipalCreateOrConnectWithoutTiposInput | TaskPrincipalCreateOrConnectWithoutTiposInput[]
    upsert?: TaskPrincipalUpsertWithWhereUniqueWithoutTiposInput | TaskPrincipalUpsertWithWhereUniqueWithoutTiposInput[]
    set?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    disconnect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    delete?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    connect?: TaskPrincipalWhereUniqueInput | TaskPrincipalWhereUniqueInput[]
    update?: TaskPrincipalUpdateWithWhereUniqueWithoutTiposInput | TaskPrincipalUpdateWithWhereUniqueWithoutTiposInput[]
    updateMany?: TaskPrincipalUpdateManyWithWhereWithoutTiposInput | TaskPrincipalUpdateManyWithWhereWithoutTiposInput[]
    deleteMany?: TaskPrincipalScalarWhereInput | TaskPrincipalScalarWhereInput[]
  }

  export type CategoriaTaskCreateNestedManyWithoutTaskPrincipalInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput> | CategoriaTaskCreateWithoutTaskPrincipalInput[] | CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput | CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
  }

  export type UsuarioCreateNestedOneWithoutTaskPrincipalInput = {
    create?: XOR<UsuarioCreateWithoutTaskPrincipalInput, UsuarioUncheckedCreateWithoutTaskPrincipalInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTaskPrincipalInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CategoriaTaskUncheckedCreateNestedManyWithoutTaskPrincipalInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput> | CategoriaTaskCreateWithoutTaskPrincipalInput[] | CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput | CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
  }

  export type CategoriaTaskUpdateManyWithoutTaskPrincipalNestedInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput> | CategoriaTaskCreateWithoutTaskPrincipalInput[] | CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput | CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput[]
    upsert?: CategoriaTaskUpsertWithWhereUniqueWithoutTaskPrincipalInput | CategoriaTaskUpsertWithWhereUniqueWithoutTaskPrincipalInput[]
    set?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    disconnect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    delete?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    update?: CategoriaTaskUpdateWithWhereUniqueWithoutTaskPrincipalInput | CategoriaTaskUpdateWithWhereUniqueWithoutTaskPrincipalInput[]
    updateMany?: CategoriaTaskUpdateManyWithWhereWithoutTaskPrincipalInput | CategoriaTaskUpdateManyWithWhereWithoutTaskPrincipalInput[]
    deleteMany?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutTaskPrincipalNestedInput = {
    create?: XOR<UsuarioCreateWithoutTaskPrincipalInput, UsuarioUncheckedCreateWithoutTaskPrincipalInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTaskPrincipalInput
    upsert?: UsuarioUpsertWithoutTaskPrincipalInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTaskPrincipalInput, UsuarioUpdateWithoutTaskPrincipalInput>, UsuarioUncheckedUpdateWithoutTaskPrincipalInput>
  }

  export type CategoriaTaskUncheckedUpdateManyWithoutTaskPrincipalNestedInput = {
    create?: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput> | CategoriaTaskCreateWithoutTaskPrincipalInput[] | CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput[]
    connectOrCreate?: CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput | CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput[]
    upsert?: CategoriaTaskUpsertWithWhereUniqueWithoutTaskPrincipalInput | CategoriaTaskUpsertWithWhereUniqueWithoutTaskPrincipalInput[]
    set?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    disconnect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    delete?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    connect?: CategoriaTaskWhereUniqueInput | CategoriaTaskWhereUniqueInput[]
    update?: CategoriaTaskUpdateWithWhereUniqueWithoutTaskPrincipalInput | CategoriaTaskUpdateWithWhereUniqueWithoutTaskPrincipalInput[]
    updateMany?: CategoriaTaskUpdateManyWithWhereWithoutTaskPrincipalInput | CategoriaTaskUpdateManyWithWhereWithoutTaskPrincipalInput[]
    deleteMany?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TaskCreateWithoutUsuarioInput = {
    nome: string
    descricao: string
    tipos?: CategoriaTaskCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    descricao: string
    tipos?: CategoriaTaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutUsuarioInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput>
  }

  export type TaskCreateManyUsuarioInputEnvelope = {
    data: TaskCreateManyUsuarioInput | TaskCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type TaskPrincipalCreateWithoutUsuarioInput = {
    nome: string
    descricao: string
    tipos?: CategoriaTaskCreateNestedManyWithoutTaskPrincipalInput
  }

  export type TaskPrincipalUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    descricao: string
    tipos?: CategoriaTaskUncheckedCreateNestedManyWithoutTaskPrincipalInput
  }

  export type TaskPrincipalCreateOrConnectWithoutUsuarioInput = {
    where: TaskPrincipalWhereUniqueInput
    create: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutUsuarioInput, TaskUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TaskCreateWithoutUsuarioInput, TaskUncheckedCreateWithoutUsuarioInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutUsuarioInput, TaskUncheckedUpdateWithoutUsuarioInput>
  }

  export type TaskUpdateManyWithWhereWithoutUsuarioInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: IntFilter<"Task"> | number
    nome?: StringFilter<"Task"> | string
    descricao?: StringFilter<"Task"> | string
    usuarioId?: IntFilter<"Task"> | number
  }

  export type TaskPrincipalUpsertWithoutUsuarioInput = {
    update: XOR<TaskPrincipalUpdateWithoutUsuarioInput, TaskPrincipalUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TaskPrincipalCreateWithoutUsuarioInput, TaskPrincipalUncheckedCreateWithoutUsuarioInput>
    where?: TaskPrincipalWhereInput
  }

  export type TaskPrincipalUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: TaskPrincipalWhereInput
    data: XOR<TaskPrincipalUpdateWithoutUsuarioInput, TaskPrincipalUncheckedUpdateWithoutUsuarioInput>
  }

  export type TaskPrincipalUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUpdateManyWithoutTaskPrincipalNestedInput
  }

  export type TaskPrincipalUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUncheckedUpdateManyWithoutTaskPrincipalNestedInput
  }

  export type CategoriaTaskCreateWithoutTaskInput = {
    nome: string
    taskPrincipal?: TaskPrincipalCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskUncheckedCreateWithoutTaskInput = {
    id?: number
    nome: string
    taskPrincipal?: TaskPrincipalUncheckedCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskCreateOrConnectWithoutTaskInput = {
    where: CategoriaTaskWhereUniqueInput
    create: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput>
  }

  export type UsuarioCreateWithoutTasksInput = {
    nome: string
    email: string
    senha: string
    taskPrincipal?: TaskPrincipalCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTasksInput = {
    id?: number
    nome: string
    email: string
    senha: string
    taskPrincipal?: TaskPrincipalUncheckedCreateNestedOneWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTasksInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTasksInput, UsuarioUncheckedCreateWithoutTasksInput>
  }

  export type CategoriaTaskUpsertWithWhereUniqueWithoutTaskInput = {
    where: CategoriaTaskWhereUniqueInput
    update: XOR<CategoriaTaskUpdateWithoutTaskInput, CategoriaTaskUncheckedUpdateWithoutTaskInput>
    create: XOR<CategoriaTaskCreateWithoutTaskInput, CategoriaTaskUncheckedCreateWithoutTaskInput>
  }

  export type CategoriaTaskUpdateWithWhereUniqueWithoutTaskInput = {
    where: CategoriaTaskWhereUniqueInput
    data: XOR<CategoriaTaskUpdateWithoutTaskInput, CategoriaTaskUncheckedUpdateWithoutTaskInput>
  }

  export type CategoriaTaskUpdateManyWithWhereWithoutTaskInput = {
    where: CategoriaTaskScalarWhereInput
    data: XOR<CategoriaTaskUpdateManyMutationInput, CategoriaTaskUncheckedUpdateManyWithoutTaskInput>
  }

  export type CategoriaTaskScalarWhereInput = {
    AND?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
    OR?: CategoriaTaskScalarWhereInput[]
    NOT?: CategoriaTaskScalarWhereInput | CategoriaTaskScalarWhereInput[]
    id?: IntFilter<"CategoriaTask"> | number
    nome?: StringFilter<"CategoriaTask"> | string
  }

  export type UsuarioUpsertWithoutTasksInput = {
    update: XOR<UsuarioUpdateWithoutTasksInput, UsuarioUncheckedUpdateWithoutTasksInput>
    create: XOR<UsuarioCreateWithoutTasksInput, UsuarioUncheckedCreateWithoutTasksInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTasksInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTasksInput, UsuarioUncheckedUpdateWithoutTasksInput>
  }

  export type UsuarioUpdateWithoutTasksInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    taskPrincipal?: TaskPrincipalUpdateOneWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    taskPrincipal?: TaskPrincipalUncheckedUpdateOneWithoutUsuarioNestedInput
  }

  export type TaskCreateWithoutTiposInput = {
    nome: string
    descricao: string
    usuario: UsuarioCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutTiposInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
  }

  export type TaskCreateOrConnectWithoutTiposInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput>
  }

  export type TaskPrincipalCreateWithoutTiposInput = {
    nome: string
    descricao: string
    usuario: UsuarioCreateNestedOneWithoutTaskPrincipalInput
  }

  export type TaskPrincipalUncheckedCreateWithoutTiposInput = {
    id?: number
    nome: string
    descricao: string
    usuarioId: number
  }

  export type TaskPrincipalCreateOrConnectWithoutTiposInput = {
    where: TaskPrincipalWhereUniqueInput
    create: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutTiposInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutTiposInput, TaskUncheckedUpdateWithoutTiposInput>
    create: XOR<TaskCreateWithoutTiposInput, TaskUncheckedCreateWithoutTiposInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutTiposInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutTiposInput, TaskUncheckedUpdateWithoutTiposInput>
  }

  export type TaskUpdateManyWithWhereWithoutTiposInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutTiposInput>
  }

  export type TaskPrincipalUpsertWithWhereUniqueWithoutTiposInput = {
    where: TaskPrincipalWhereUniqueInput
    update: XOR<TaskPrincipalUpdateWithoutTiposInput, TaskPrincipalUncheckedUpdateWithoutTiposInput>
    create: XOR<TaskPrincipalCreateWithoutTiposInput, TaskPrincipalUncheckedCreateWithoutTiposInput>
  }

  export type TaskPrincipalUpdateWithWhereUniqueWithoutTiposInput = {
    where: TaskPrincipalWhereUniqueInput
    data: XOR<TaskPrincipalUpdateWithoutTiposInput, TaskPrincipalUncheckedUpdateWithoutTiposInput>
  }

  export type TaskPrincipalUpdateManyWithWhereWithoutTiposInput = {
    where: TaskPrincipalScalarWhereInput
    data: XOR<TaskPrincipalUpdateManyMutationInput, TaskPrincipalUncheckedUpdateManyWithoutTiposInput>
  }

  export type TaskPrincipalScalarWhereInput = {
    AND?: TaskPrincipalScalarWhereInput | TaskPrincipalScalarWhereInput[]
    OR?: TaskPrincipalScalarWhereInput[]
    NOT?: TaskPrincipalScalarWhereInput | TaskPrincipalScalarWhereInput[]
    id?: IntFilter<"TaskPrincipal"> | number
    nome?: StringFilter<"TaskPrincipal"> | string
    descricao?: StringFilter<"TaskPrincipal"> | string
    usuarioId?: IntFilter<"TaskPrincipal"> | number
  }

  export type CategoriaTaskCreateWithoutTaskPrincipalInput = {
    nome: string
    task?: TaskCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput = {
    id?: number
    nome: string
    task?: TaskUncheckedCreateNestedManyWithoutTiposInput
  }

  export type CategoriaTaskCreateOrConnectWithoutTaskPrincipalInput = {
    where: CategoriaTaskWhereUniqueInput
    create: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput>
  }

  export type UsuarioCreateWithoutTaskPrincipalInput = {
    nome: string
    email: string
    senha: string
    tasks?: TaskCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTaskPrincipalInput = {
    id?: number
    nome: string
    email: string
    senha: string
    tasks?: TaskUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTaskPrincipalInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTaskPrincipalInput, UsuarioUncheckedCreateWithoutTaskPrincipalInput>
  }

  export type CategoriaTaskUpsertWithWhereUniqueWithoutTaskPrincipalInput = {
    where: CategoriaTaskWhereUniqueInput
    update: XOR<CategoriaTaskUpdateWithoutTaskPrincipalInput, CategoriaTaskUncheckedUpdateWithoutTaskPrincipalInput>
    create: XOR<CategoriaTaskCreateWithoutTaskPrincipalInput, CategoriaTaskUncheckedCreateWithoutTaskPrincipalInput>
  }

  export type CategoriaTaskUpdateWithWhereUniqueWithoutTaskPrincipalInput = {
    where: CategoriaTaskWhereUniqueInput
    data: XOR<CategoriaTaskUpdateWithoutTaskPrincipalInput, CategoriaTaskUncheckedUpdateWithoutTaskPrincipalInput>
  }

  export type CategoriaTaskUpdateManyWithWhereWithoutTaskPrincipalInput = {
    where: CategoriaTaskScalarWhereInput
    data: XOR<CategoriaTaskUpdateManyMutationInput, CategoriaTaskUncheckedUpdateManyWithoutTaskPrincipalInput>
  }

  export type UsuarioUpsertWithoutTaskPrincipalInput = {
    update: XOR<UsuarioUpdateWithoutTaskPrincipalInput, UsuarioUncheckedUpdateWithoutTaskPrincipalInput>
    create: XOR<UsuarioCreateWithoutTaskPrincipalInput, UsuarioUncheckedCreateWithoutTaskPrincipalInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTaskPrincipalInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTaskPrincipalInput, UsuarioUncheckedUpdateWithoutTaskPrincipalInput>
  }

  export type UsuarioUpdateWithoutTaskPrincipalInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTaskPrincipalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type TaskCreateManyUsuarioInput = {
    id?: number
    nome: string
    descricao: string
  }

  export type TaskUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipos?: CategoriaTaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaTaskUpdateWithoutTaskInput = {
    nome?: StringFieldUpdateOperationsInput | string
    taskPrincipal?: TaskPrincipalUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    taskPrincipal?: TaskPrincipalUncheckedUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutTiposInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutTiposInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskUncheckedUpdateManyWithoutTiposInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskPrincipalUpdateWithoutTiposInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutTaskPrincipalNestedInput
  }

  export type TaskPrincipalUncheckedUpdateWithoutTiposInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskPrincipalUncheckedUpdateManyWithoutTiposInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaTaskUpdateWithoutTaskPrincipalInput = {
    nome?: StringFieldUpdateOperationsInput | string
    task?: TaskUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskUncheckedUpdateWithoutTaskPrincipalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    task?: TaskUncheckedUpdateManyWithoutTiposNestedInput
  }

  export type CategoriaTaskUncheckedUpdateManyWithoutTaskPrincipalInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaTaskCountOutputTypeDefaultArgs instead
     */
    export type CategoriaTaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaTaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskPrincipalCountOutputTypeDefaultArgs instead
     */
    export type TaskPrincipalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskPrincipalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaTaskDefaultArgs instead
     */
    export type CategoriaTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaTaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskPrincipalDefaultArgs instead
     */
    export type TaskPrincipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskPrincipalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogDefaultArgs instead
     */
    export type LogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}